/*
 * Copyright (C) 2017 larryTheCoder
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.larryTheCoder.database;

import cn.nukkit.Player;
import cn.nukkit.level.Position;
import com.larryTheCoder.player.PlayerData;
import java.util.ArrayList;
import com.larryTheCoder.storage.IslandData;
import java.util.List;

/**
 * Default database v1.0
 * 
 * @author larryTheCoder
 */
public interface Database {

    /**
     * Get the player island by location
     *
     * @param levelName     The level name
     * @param X             Position `X`
     * @param Z             Position `Z`
     * @return IslandData
     */
    public IslandData getIslandLocation(String levelName, int X, int Z);
    
    /**
     * Get the player island by name and its ID
     *
     * @param owner          The player`s name
     * @return IslandData
     */
    public List<IslandData> getIslands(String owner);

    /**
     * Get the player island by name and its ID
     *
     * @param name          The player`s name
     * @param homes         The number of player island
     * @return IslandData
     */
    public IslandData getIsland(String name, int homes);

    /**
     * Delete an existing player island.
     *
     * @param pd            The player`s IslandData
     * @return IslandData
     */
    public boolean deleteIsland(IslandData pd);

    /**
     * Get the player island by id
     *
     * @param id            Id that generated by {@code Island.getIslandkey(int)}
     * @return IslandDatabase
     */
    public IslandData getIslandById(int id);


    /**
     * Close the database. Generally not recommended to be used by add-ons.
     */
    public void close();

    /**
     * Save player Island
     *
     * @param pd            Player island data
     * @return {@code true} if no exceptions were thrown
     */
    public boolean saveIsland(IslandData pd);

    /**
     * Gets the player data
     * 
     * @param pl            Player of the target
     * @return PlayerData
     */
    public PlayerData getPlayerData(Player pl);
    
    /**
     * create the player data
     * 
     * @param p             Player of the target
     * @return {@code true} if no exceptions were thrown
     */
    public boolean createPlayer(Player p);
    
    public boolean savePlayerData(PlayerData pd);
    
    public List<String> getWorlds();

    public boolean saveWorlds(ArrayList<String> pd);

    /**
     * Set the Player Island location
     *
     * @param pos           Position of the target location
     * @param id            Island id
     * @param owner
     * @return {@code true} if no exceptions were thrown
     */
    public boolean setPosition(Position pos, int id, String owner);

}
